"use client";

import React, { useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { getProjectById, updateProject, deleteProject, addTeamMember, updateTeamMember, deleteTeamMember } from "@/server-action/db-actions";

export interface Project {
  id: number; // Changed to number for PostgreSQL serial ID
  title: string;
  description: string;
  year: number; // Changed to number for year_of_submission
  domain: string;
  type: string;
  department: string;
  liveLink: string;
  teamMembers?: Member[]; // Made teamMembers optional
}

export interface Member {
  member_id?: number; // Optional as it's generated by DB
  name: string;
  linkedin: string;
}

export default function ManageProjectsPage() {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Manage Projects</h1>
      <Tabs defaultValue="edit">
        <TabsList className="mb-4">
          <TabsTrigger value="edit">Edit Project</TabsTrigger>
          <TabsTrigger value="delete">Delete Project</TabsTrigger>
        </TabsList>
        <TabsContent value="edit">
          <EditProject />
        </TabsContent>
        <TabsContent value="delete">
          <DeleteProject />
        </TabsContent>
      </Tabs>
    </div>
  );
}

function EditProject() {
  const [projectId, setProjectId] = useState<string | number>(""); // Allow string for initial input, then convert to number
  const [formData, setFormData] = useState<Omit<Project, "id"> | null>(null);
  const [status, setStatus] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // State for new member form
  const [newMemberName, setNewMemberName] = useState("");
  const [newMemberLinkedin, setNewMemberLinkedin] = useState("");
  const [addMemberStatus, setAddMemberStatus] = useState<string | null>(null);
  const [addMemberLoading, setAddMemberLoading] = useState(false);

  // State for editing member
  const [editMemberId, setEditMemberId] = useState<string | number>("");
  const [editMemberName, setEditMemberName] = useState("");
  const [editMemberLinkedin, setEditMemberLinkedin] = useState("");
  const [editMemberStatus, setEditMemberStatus] = useState<string | null>(null);
  const [editMemberLoading, setEditMemberLoading] = useState(false);

  // State for deleting member
  const [deleteMemberId, setDeleteMemberId] = useState<string | number>("");
  const [deleteMemberStatus, setDeleteMemberStatus] = useState<string | null>(null);
  const [deleteMemberLoading, setDeleteMemberLoading] = useState(false);
  const [confirmingDeleteMember, setConfirmingDeleteMember] = useState(false);

  const fetchProject = async () => {
    if (!projectId) return;
    setLoading(true);
    setStatus(null);
    try {
      const idAsNumber = typeof projectId === "string" ? parseInt(projectId, 10) : projectId;
      if (isNaN(idAsNumber)) {
        setStatus("Invalid Project ID.");
        setLoading(false);
        return;
      }
      const fetchedProject = await getProjectById(idAsNumber);
      if (fetchedProject) {
        setFormData({ ...fetchedProject, teamMembers: fetchedProject.teamMembers || [] }); // Ensure teamMembers is initialized
        setStatus(null); // Clear previous status on successful fetch
      } else {
        setStatus("Project not found.");
        setFormData(null);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setStatus("Error fetching project: " + err.message);
      } else {
        setStatus("An unknown error occurred while fetching project.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) =>
      prevData
        ? {
            ...prevData,
            [name]: name === "year" ? parseInt(value, 10) : value,
          }
        : null
    );
  };

  const handleSubmit = async () => {
    if (!projectId || !formData) return;
    setStatus(null);
    setLoading(true);
    try {
      const idAsNumber = typeof projectId === "string" ? parseInt(projectId, 10) : projectId;
      if (isNaN(idAsNumber)) {
        setStatus("Invalid Project ID.");
        setLoading(false);
        return;
      }
      const response = await updateProject(idAsNumber, formData);
      if (response.success) {
        setStatus(response.message);
        fetchProject(); // Re-fetch project to update team members
      } else {
        setStatus("Failed to update project: " + response.message);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setStatus("Error updating project: " + err.message);
      } else {
        setStatus("An unknown error occurred while updating project.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleAddMember = async () => {
    if (!projectId || !newMemberName || !newMemberLinkedin) {
      setAddMemberStatus("Please fill all new member fields.");
      return;
    }
    setAddMemberStatus(null);
    setAddMemberLoading(true);
    try {
      const idAsNumber = typeof projectId === "string" ? parseInt(projectId, 10) : projectId;
      if (isNaN(idAsNumber)) {
        setAddMemberStatus("Invalid Project ID.");
        setAddMemberLoading(false);
        return;
      }
      const response = await addTeamMember(idAsNumber, newMemberName, newMemberLinkedin);
      if (response.success) {
        setAddMemberStatus(response.message);
        setNewMemberName("");
        setNewMemberLinkedin("");
        fetchProject(); // Re-fetch project to update team members
      } else {
        setAddMemberStatus("Failed to add member: " + response.message);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setAddMemberStatus("Error adding member: " + err.message);
      } else {
        setAddMemberStatus("An unknown error occurred while adding member.");
      }
    } finally {
      setAddMemberLoading(false);
    }
  };

  const handleUpdateMember = async () => {
    if (!editMemberId || !editMemberName || !editMemberLinkedin) {
      setEditMemberStatus("Please fill all edit member fields.");
      return;
    }
    setEditMemberStatus(null);
    setEditMemberLoading(true);
    try {
      const idAsNumber = typeof editMemberId === "string" ? parseInt(editMemberId, 10) : editMemberId;
      if (isNaN(idAsNumber)) {
        setEditMemberStatus("Invalid Member ID.");
        setEditMemberLoading(false);
        return;
      }
      const response = await updateTeamMember(idAsNumber, editMemberName, editMemberLinkedin);
      if (response.success) {
        setEditMemberStatus(response.message);
        fetchProject(); // Re-fetch project to update team members
      } else {
        setEditMemberStatus("Failed to update member: " + response.message);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setEditMemberStatus("Error updating member: " + err.message);
      } else {
        setEditMemberStatus("An unknown error occurred while updating member.");
      }
    } finally {
      setEditMemberLoading(false);
    }
  };

  const handleDeleteMember = async () => {
    if (!deleteMemberId) {
      setDeleteMemberStatus("Please enter a member ID to delete.");
      return;
    }
    setDeleteMemberStatus(null);
    setDeleteMemberLoading(true);
    try {
      const idAsNumber = typeof deleteMemberId === "string" ? parseInt(deleteMemberId, 10) : deleteMemberId;
      if (isNaN(idAsNumber)) {
        setDeleteMemberStatus("Invalid Member ID.");
        setDeleteMemberLoading(false);
        return;
      }
      const response = await deleteTeamMember(idAsNumber);
      if (response.success) {
        setDeleteMemberStatus(response.message);
        setDeleteMemberId("");
        setConfirmingDeleteMember(false);
        fetchProject(); // Re-fetch project to update team members
      } else {
        setDeleteMemberStatus("Failed to delete member: " + response.message);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setDeleteMemberStatus("Error deleting member: " + err.message);
      } else {
        setDeleteMemberStatus("An unknown error occurred while deleting member.");
      }
    } finally {
      setDeleteMemberLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <Input
        type="text"
        placeholder="Enter Project ID to edit"
        value={projectId}
        onChange={(e) => setProjectId(e.target.value)}
      />
      <Button onClick={fetchProject} disabled={loading}>
        {loading ? "Fetching..." : "Fetch Project"}
      </Button>

      {formData && (
        <div className="space-y-6 border p-4 rounded">
          <h3 className="text-lg font-semibold">Edit Project Details: {formData.title || projectId}</h3>
          {/* Project Details Edit Form */}
          <div className="space-y-4">
            <Input
              type="text"
              name="title"
              placeholder="Project Title"
              value={formData.title}
              onChange={handleChange}
            />
            <textarea
              name="description"
              placeholder="Project Description"
              value={formData.description}
              onChange={handleChange}
              className="border p-2 w-full rounded"
              rows={4}
            ></textarea>
            <Input
              type="text"
              name="liveLink"
              placeholder="Live Link"
              value={formData.liveLink}
              onChange={handleChange}
            />
            <Input
              type="number"
              name="year"
              placeholder="Year (e.g., 2023)"
              value={formData.year}
              onChange={handleChange}
            />
            <Input
              type="text"
              name="domain"
              placeholder="Domain (e.g., Web Development)"
              value={formData.domain}
              onChange={handleChange}
            />
            <Input
              type="text"
              name="type"
              placeholder="Type (e.g., Research Project)"
              value={formData.type}
              onChange={handleChange}
            />
            <Input
              type="text"
              name="department"
              placeholder="Department (e.g., Computer Science)"
              value={formData.department}
              onChange={handleChange}
            />
            <Button onClick={handleSubmit} disabled={loading}>
              {loading ? "Updating..." : "Update Project"}
            </Button>
            {status && <p className="mt-2 text-sm">{status}</p>}
          </div>

          {/* Team Members List */}
          <div className="mt-6">
            <h4 className="text-md font-semibold">Current Team Members:</h4>
            {formData.teamMembers && formData.teamMembers.length > 0 ? (
              <ul className="list-disc list-inside ml-4">
                {formData.teamMembers.map((member) => (
                  <li key={member.member_id} className="text-sm">
                    {member.name} ({member.linkedin}) ID: {member.member_id}
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-gray-500">No team members added yet.</p>
            )}
          </div>

          {/* Add Member Form */}
          <div className="mt-6 space-y-4 border p-4 rounded">
            <h4 className="text-md font-semibold">Add New Team Member:</h4>
            <Input
              type="text"
              placeholder="Member Name"
              value={newMemberName}
              onChange={(e) => setNewMemberName(e.target.value)}
            />
            <Input
              type="text"
              placeholder="LinkedIn Profile URL"
              value={newMemberLinkedin}
              onChange={(e) => setNewMemberLinkedin(e.target.value)}
            />
            <Button onClick={handleAddMember} disabled={addMemberLoading}>
              {addMemberLoading ? "Adding..." : "Add Member"}
            </Button>
            {addMemberStatus && <p className="mt-2 text-sm">{addMemberStatus}</p>}
          </div>

          {/* Edit Member Form */}
          <div className="mt-6 space-y-4 border p-4 rounded">
            <h4 className="text-md font-semibold">Edit Team Member:</h4>
            <Input
              type="text"
              placeholder="Member ID to edit"
              value={editMemberId}
              onChange={(e) => setEditMemberId(e.target.value)}
            />
            <Input
              type="text"
              placeholder="New Member Name"
              value={editMemberName}
              onChange={(e) => setEditMemberName(e.target.value)}
            />
            <Input
              type="text"
              placeholder="New LinkedIn Profile URL"
              value={editMemberLinkedin}
              onChange={(e) => setEditMemberLinkedin(e.target.value)}
            />
            <Button onClick={handleUpdateMember} disabled={editMemberLoading}>
              {editMemberLoading ? "Updating..." : "Update Member"}
            </Button>
            {editMemberStatus && <p className="mt-2 text-sm">{editMemberStatus}</p>}
          </div>

          {/* Delete Member Form */}
          <div className="mt-6 space-y-4 border p-4 rounded">
            <h4 className="text-md font-semibold">Delete Team Member:</h4>
            <Input
              type="text"
              placeholder="Member ID to delete"
              value={deleteMemberId}
              onChange={(e) => setDeleteMemberId(e.target.value)}
            />
            {!confirmingDeleteMember ? (
              <Button
                onClick={() => setConfirmingDeleteMember(true)}
                disabled={deleteMemberLoading || !deleteMemberId}
                variant="destructive"
              >
                Delete Member
              </Button>
            ) : (
              <div className="space-x-4">
                <Button onClick={handleDeleteMember} disabled={deleteMemberLoading} variant="destructive">
                  Confirm Delete
                </Button>
                <Button onClick={() => setConfirmingDeleteMember(false)} disabled={deleteMemberLoading} variant="outline">
                  Cancel
                </Button>
              </div>
            )}
            {deleteMemberStatus && <p className="mt-2 text-sm">{deleteMemberStatus}</p>}
          </div>
        </div>
      )}
      {!formData && projectId && !loading && <p className="mt-2 text-red-600">Project with ID {projectId} not found.</p>}
    </div>
  );
}

function DeleteProject() {
  const [projectId, setProjectId] = useState<string | number>("");
  const [status, setStatus] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [confirming, setConfirming] = useState(false);

  const handleDelete = async () => {
    setStatus(null);
    setLoading(true);
    try {
      const idAsNumber = typeof projectId === "string" ? parseInt(projectId, 10) : projectId;
      if (isNaN(idAsNumber)) {
        setStatus("Invalid Project ID.");
        setLoading(false);
        return;
      }
      const response = await deleteProject(idAsNumber);
      if (response.success) {
        setStatus(response.message);
        setProjectId("");
        setConfirming(false);
      } else {
        setStatus("Failed to delete project: " + response.message);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setStatus("Error deleting project: " + err.message);
      } else {
        setStatus("An unknown error occurred while deleting project.");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <Input
        type="text"
        placeholder="Enter Project ID to delete"
        value={projectId}
        onChange={(e) => setProjectId(e.target.value)}
      />
      {!confirming ? (
        <Button
          onClick={() => setConfirming(true)}
          disabled={loading || !projectId}
          variant="destructive"
        >
          Delete Project
        </Button>
      ) : (
        <div className="space-x-4">
          <Button onClick={handleDelete} disabled={loading} variant="destructive">
            Confirm Delete
          </Button>
          <Button onClick={() => setConfirming(false)} disabled={loading} variant="outline">
            Cancel
          </Button>
        </div>
      )}
      {status && <p className="mt-2 text-sm">{status}</p>}
    </div>
  );
} 