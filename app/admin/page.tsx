"use client";

/**
 * Admin Dashboard (First Page after Login):
 * 
 * When admins log in, this is the first page they will see.
 * 
 * On this page, admins are able to edit or delete any project.
 * 
 * However, before performing edit or delete actions, a confirmation popup should appear
 * asking the admin to confirm whether they want to proceed with the edit or deletion.
 */
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { getUniqueDepartments, getUniqueDomains, getUniqueProjectTypes, getUniqueYears, getProjects } from '@/server-action/db-actions';
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { signOutWithGoogle, onAuthStateChanged } from '@/lib/firebase/auth';
import { removeSession } from '@/server-action/auth_action';
import { doc, getDoc } from 'firebase/firestore';
import { firestore } from '@/lib/firebase/config';
import Image from 'next/image';
import logo from '@/public/image/logo.png';

export interface Project {
  id: number; // Changed to number for PostgreSQL serial ID
  title: string;
  description: string;
  year: number; // Changed to number for year_of_submission
  domain: string;
  type: string;
  department: string;
  liveLink: string;
  teamMembers?: Member[]; // Made teamMembers optional
}

export interface Member {
  member_id?: number; // Optional as it's generated by DB
  name: string;
  linkedin: string;
}

export default function AdminPage() {
  const [years, setYears] = useState<number[]>([]);
  const [projectTypes, setProjectTypes] = useState<string[]>([]);
  const [departments, setDepartments] = useState<string[]>([]);
  const [domains, setDomains] = useState<string[]>([]);

  const [selectedYear, setSelectedYear] = useState<string>("");
  const [selectedProjectType, setSelectedProjectType] = useState<string>("");
  const [selectedDepartment, setSelectedDepartment] = useState<string>("");
  const [selectedDomain, setSelectedDomain] = useState<string>("");

  const [appliedYear, setAppliedYear] = useState<number | undefined>(undefined);
  const [appliedProjectType, setAppliedProjectType] = useState<string | undefined>(undefined);
  const [appliedDepartment, setAppliedDepartment] = useState<string | undefined>(undefined);
  const [appliedDomain, setAppliedDomain] = useState<string | undefined>(undefined);
  const [selectedSort, setSelectedSort] = useState<"all" | "latest" | "oldest" | "this_week">("all");

  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userRole, setUserRole] = useState<string | null>(null);

  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      const unsubscribe = onAuthStateChanged(async (authUser) => {
        if (authUser) {
          const userDocRef = doc(firestore, 'adminemail', authUser.email as string);
          const userDoc = await getDoc(userDocRef);

          if (userDoc.exists()) {
            const role = userDoc.data()?.role;
            if (role === 'admin' || role === 'superadmin') {
              setIsAuthenticated(true);
              setUserRole(role);
            } else {
              setIsAuthenticated(false);
              router.push('/auth/Login');
            }
          } else {
            setIsAuthenticated(false);
            router.push('/auth/Login');
          }
        } else {
          setIsAuthenticated(false);
          router.push('/auth/Login');
        }
        setLoading(false);
      });

      return () => unsubscribe();
    };

    checkAuth();
  }, [router]);

  useEffect(() => {
    const fetchFilterOptions = async () => {
      try {
        const uniqueYears = await getUniqueYears();
        setYears(uniqueYears);
        const uniqueProjectTypes = await getUniqueProjectTypes();
        setProjectTypes(uniqueProjectTypes);
        const uniqueDepartments = await getUniqueDepartments();
        setDepartments(uniqueDepartments);
        const uniqueDomains = await getUniqueDomains();
        setDomains(uniqueDomains);
      } catch (error) {
        console.error("Failed to fetch filter options:", error);
      }
    };
    if (isAuthenticated) {
      fetchFilterOptions();
    }
  }, [isAuthenticated]);

  const handleApplyFilters = () => {
    setAppliedYear(selectedYear ? parseInt(selectedYear, 10) : undefined);
    setAppliedProjectType(selectedProjectType || undefined);
    setAppliedDepartment(selectedDepartment || undefined);
    setAppliedDomain(selectedDomain || undefined);
  };

  const handleClearFilters = () => {
    setSelectedYear("");
    setSelectedProjectType("");
    setSelectedDepartment("");
    setSelectedDomain("");
    setAppliedYear(undefined);
    setAppliedProjectType(undefined);
    setAppliedDepartment(undefined);
    setAppliedDomain(undefined);
  };

  const handleLogout = async () => {
    try {
      await signOutWithGoogle();
      await removeSession();
      router.push('/login'); // Redirect to login page after logout
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return null; // Or redirect to login page if not authenticated
  }

  return (
    <div className="flex min-h-screen bg-gray-100">
      {/* Header */}
      <header className="fixed top-0 left-0 right-0 bg-white shadow-md p-4 flex justify-between items-center z-10">
        <h1 className="text-xl font-bold">Project Archive</h1>
        <Button onClick={handleLogout} variant="destructive">Logout</Button>
      </header>

      {/* Sidebar for Filters */}
      <aside className="w-64 bg-white p-6 shadow-md space-y-4 mt-16"> {/* Adjusted mt to push content below header */}
        {/* darsana logo and Admin Dashboard title */}
        <div className="mb-6">
          <div className="flex items-center justify-center w-25 h-20 overflow-hidden mb-6">
            <div className="relative w-full h-full">
              <Image
                src={logo}
                alt="Admin Dashboard"
                layout="fill"
                objectFit="contain"
              />
            </div>
          </div>
          <div className="text-center text-black">Admin Dashboard</div>
        </div>

        <div className="space-y-2 mt-3">
          {userRole === 'superadmin' && ( // Added conditional rendering based on userRole
            <Link href="/admin/AdminMangement" passHref>
              <button
                className="flex items-center w-full p-3 transition rounded-xl border-2 duration-300 text-gray-700 hover:bg-gray-100 hover:text-gray-900"
              >
                Admin management
              </button>
            </Link>
          )}
        </div>

        <h2 className="text-xl font-semibold mb-4">Filters</h2>
        <div className="space-y-4">
          <div>
            <label htmlFor="year" className="block text-sm font-medium text-gray-700">Year of Submission</label>
            <Select onValueChange={setSelectedYear} value={selectedYear}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select a year" />
              </SelectTrigger>
              <SelectContent>
                {years.map((year) => (
                  <SelectItem key={year} value={String(year)}>{year}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <label htmlFor="projectType" className="block text-sm font-medium text-gray-700">Project Type</label>
            <Select onValueChange={setSelectedProjectType} value={selectedProjectType}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select project type" />
              </SelectTrigger>
              <SelectContent>
                {projectTypes.map((type) => (
                  <SelectItem key={type} value={type}>{type}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <label htmlFor="department" className="block text-sm font-medium text-gray-700">Department</label>
            <Select onValueChange={setSelectedDepartment} value={selectedDepartment}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select department" />
              </SelectTrigger>
              <SelectContent>
                {departments.map((department) => (
                  <SelectItem key={department} value={department}>{department}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <label htmlFor="domain" className="block text-sm font-medium text-gray-700">Domain</label>
            <Select onValueChange={setSelectedDomain} value={selectedDomain}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select domain" />
              </SelectTrigger>
              <SelectContent>
                {domains.map((domain) => (
                  <SelectItem key={domain} value={domain}>{domain}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <Button onClick={handleApplyFilters} className="w-full bg-black text-white hover:bg-gray-800">Apply Filters</Button>
          <Button onClick={handleClearFilters} variant="outline" className="w-full border-gray-300 text-gray-700 hover:bg-gray-50">Clear Filters</Button>
        </div>
      </aside>

      {/* Main Content Area */}
      <main className="flex-1 p-6 mt-16"> {/* Adjusted mt to push content below header */}
        {/* <h1 className="text-2xl font-bold mb-6">Admin Dashboard</h1> */}

        <div className="flex flex-col md:flex-row md:justify-between items-start md:items-center mb-6">
          {/* Navigation Tabs (All, Latest, Oldest, This Week) */}
          <Tabs defaultValue="all" className="w-full md:w-auto mb-4 md:mb-0">
            <TabsList className="grid w-full grid-cols-4 md:inline-flex">
              <TabsTrigger value="all" onClick={() => setSelectedSort("all")}>All</TabsTrigger>
              <TabsTrigger value="latest" onClick={() => setSelectedSort("latest")}>Latest</TabsTrigger>
              <TabsTrigger value="oldest" onClick={() => setSelectedSort("oldest")}>Oldest</TabsTrigger>
              <TabsTrigger value="this_week" onClick={() => setSelectedSort("this_week")}>This Week</TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="flex flex-col md:flex-row gap-4">
            {/* Manage Projects */}
            <Link href="/admin/ManageProjects" passHref>
              <div className="bg-white p-3 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 cursor-pointer flex items-center justify-center">
                <h2 className="text-md font-semibold text-blue-600">Manage Projects</h2>
              </div>
            </Link>
            {/* Manage Categories */}
            <Link href="/admin/ManageCategories" passHref>
              <div className="bg-white p-3 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 cursor-pointer flex items-center justify-center">
                <h2 className="text-md font-semibold text-green-600">Manage Categories</h2>
              </div>
            </Link>
          </div>
        </div>

        <ProjectList
          year={appliedYear}
          projectType={appliedProjectType}
          department={appliedDepartment}
          domain={appliedDomain}
          sort={selectedSort}
        />
      </main>
    </div>
  );
}

interface ProjectListProps {
  year?: number;
  projectType?: string;
  department?: string;
  domain?: string;
  sort?: "all" | "latest" | "oldest" | "this_week";
}

const ProjectList: React.FC<ProjectListProps> = ({ year, projectType, department, domain, sort }) => {
  const [projectsData, setProjectsData] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [expandedProjectId, setExpandedProjectId] = useState<number | null>(null);

  useEffect(() => {
    const fetchProjectsData = async () => {
      setLoading(true);
      setError(null);
      try {
        const fetchedProjects = await getProjects(year, projectType, department, domain, sort);
        setProjectsData(fetchedProjects);
      } catch (err: unknown) {
        if (err instanceof Error) {
          setError("Error fetching projects: " + err.message);
        } else {
          setError("An unknown error occurred while fetching projects.");
        }
      } finally {
        setLoading(false);
      }
    };

    fetchProjectsData();
  }, [year, projectType, department, domain, sort]);

  const handleCardClick = (projectId: number) => {
    setExpandedProjectId(prevId => (prevId === projectId ? null : projectId));
  };

  if (loading) return <div className="p-6">Loading projects...</div>;
  if (error) return <div className="p-6 text-red-600">{error}</div>;

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {projectsData.map((project) => {
        const isExpanded = expandedProjectId === project.id;
        return (
          <div
            key={project.id}
            className={`border rounded-xl p-6 shadow-md bg-white text-black flex flex-col justify-between h-auto cursor-pointer ${isExpanded ? 'ring-2 ring-blue-500' : ''}`}
            onClick={() => handleCardClick(project.id)}
          >
            <div className="mb-4">
              <p className="text-sm text-gray-500 mb-1">Project ID: {project.id}</p>
              <h3 className="text-xl font-bold mb-2">{project.title}</h3>
              <p className={`text-gray-700 text-base ${isExpanded ? '' : 'line-clamp-3'}`}>{project.description}</p>
            </div>
            <div className="grid grid-cols-3 gap-x-4 gap-y-2 text-sm mt-auto">
              <div className="flex flex-col items-start">
                <span className="text-gray-500 text-xs">Year</span>
                <div className="flex items-center mt-1">
                  <Image src="/icons/calendar.svg" alt="Year" className="h-4 w-4 mr-1" width={16} height={16} />
                  <span className="font-medium text-gray-800">{project.year}</span>
                </div>
              </div>
              <div className="flex flex-col items-start">
                <span className="text-gray-500 text-xs">Project Type</span>
                <div className="flex items-center mt-1">
                  <Image src="/icons/project-type.svg" alt="Project Type" className="h-4 w-4 mr-1" width={16} height={16} />
                  <span className="font-medium text-gray-800">{project.type}</span>
                </div>
              </div>
              <div className="flex flex-col items-start">
                <span className="text-gray-500 text-xs">Domain</span>
                <div className="flex items-center mt-1">
                  <Image src="/icons/domain.svg" alt="Domain" className="h-4 w-4 mr-1" width={16} height={16} />
                  <span className="font-medium text-gray-800">{project.domain}</span>
                </div>
              </div>
            </div>
            {isExpanded && project.teamMembers && project.teamMembers.length > 0 && (
              <div className="mt-4 pt-4 border-t border-gray-200">
                <h4 className="text-base font-semibold mb-2 text-gray-800">Team Members:</h4>
                <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                  {project.teamMembers.map((member) => (
                    <li key={member.member_id}>
                      {member.name} - <a href={member.linkedin} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">LinkedIn</a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            <div className="mt-6 flex justify-between items-center">
              <Link href={project.liveLink} target="_blank" rel="noopener noreferrer" passHref>
                <Button className="bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 text-sm font-semibold rounded-md">
                  View Project
                </Button>
              </Link>
              {project.teamMembers && project.teamMembers.length > 0 && (
                <p className="text-sm text-gray-700 flex items-center">
                  <Image src="/icons/members.svg" alt="Members" className="h-4 w-4 mr-1" width={16} height={16} />
                  <span>{project.teamMembers.length} members</span>
                </p>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};